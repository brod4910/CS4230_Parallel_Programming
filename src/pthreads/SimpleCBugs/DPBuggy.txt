This happens because we never multiplied Size by sizeof(int). Meaning that we only allocated Size bytes and when we do reads and writes past our allocated block size we get this error.

brians-mbp-4:SimpleCBugs brianrodriguez$ ./a.out
Please provide Exp for array sizes and threshold sep by a comma
3,8
Will do DP of 8 sized arrays
Filling arrays now
=================================================================
==20143==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020000000d8 at pc 0x00010d5c75c1 bp 0x7fff52639770 sp 0x7fff52639768
WRITE of size 4 at 0x6020000000d8 thread T0
    #0 0x10d5c75c0 in main (a.out:x86_64+0x1000015c0)
    #1 0x7fffc90b9234 in start (libdyld.dylib:x86_64+0x5234)

0x6020000000d8 is located 0 bytes to the right of 8-byte region [0x6020000000d0,0x6020000000d8)
allocated by thread T0 here:
    #0 0x10d622ffc in wrap_malloc (libclang_rt.asan_osx_dynamic.dylib:x86_64+0x55ffc)
    #1 0x10d5c74f4 in main (a.out:x86_64+0x1000014f4)
    #2 0x7fffc90b9234 in start (libdyld.dylib:x86_64+0x5234)

SUMMARY: AddressSanitizer: heap-buffer-overflow (a.out:x86_64+0x1000015c0) in main
Shadow bytes around the buggy address:
  0x1c03ffffffc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1c03ffffffd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1c03ffffffe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1c03fffffff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1c0400000000: fa fa fd fd fa fa fd fd fa fa 00 06 fa fa 00 04
=>0x1c0400000010: fa fa 00 00 fa fa 00 06 fa fa 00[fa]fa fa 00 fa
  0x1c0400000020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c0400000030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c0400000040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c0400000050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c0400000060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==20143==ABORTING
Abort trap: 6